module UART_Tx (
    input wire reset_n,           // Active-low reset
    input wire clock,             // System clock
    input wire send,              // Start transmission signal
    input wire [7:0] data_in,     // Parallel data input
    input wire [1:0] parity_type, // Parity type: 00 (None), 01 (Odd), 10 (Even)
    input wire [1:0] baud_rate,   // Baud rate selection
    output wire data_tx,          // Serial output data
    output wire active_flag,      // Indicates ongoing transmission
    output wire done_flag         // Indicates end of transmission
);

    wire baud_clk;                // Baud clock
    wire parity_bit;              // Computed parity bit
    wire [9:0] frame;             // Data frame with start, data, parity, and stop bits

    // Instantiate Baud Generator
    BaudGen baud_gen (
        .clock(clock),
        .reset_n(reset_n),
        .baud_rate(baud_rate),
        .baud_clk(baud_clk)
    );

    // Instantiate Parity Generator
    Parity parity_gen (
        .data_in(data_in),
        .parity_type(parity_type),
        .parity_bit(parity_bit)
    );

    // Frame Construction
    assign frame = {1'b1, data_in, parity_bit, 1'b0}; // Stop bit, data, parity, start bit

    // Instantiate PISO (Parallel-In Serial-Out)
    PISO piso (
        .clk(baud_clk),
        .reset_n(reset_n),
        .send(send),
        .data_in(frame),
        .data_tx(data_tx),
        .active_flag(active_flag),
        .done_flag(done_flag)
    );

endmodule
